x$set(vect)
x$get()
cachemean(x)
cachemean(x)
str(x)
summary(x)
unclass(x)
mat <- matrix(1:4, nrow=2, ncol=2)
mat
x <- makeCacheMatrix()
source('~/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix()
x
x$set(mat)
cacheSolve(mat)
x$get()
x$getinverse
x$getinverse()
cacheSolve(mat)
source('~/.active-rstudio-document')
source('~/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
cacheSolve(mat)
invmat <- cacheSolve(mat)
mat*invmat
mat%*%invmat
source('~/ProgrammingAssignment2/cachematrix.R')
x$set(mat)
n <- 128
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
time1 <- system.time(matSolved1 <- cacheSolve(matCached))
time2 <- system.time(matSolved2 <- cacheSolve(matCached))
if (time1["user.self"] < time2["user.self"])
message("Solve time is less than cache time")
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
help(",,_")
help("<<-")
source('~/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
x$set(mat)
mat <- matrix(rnorm(1000))
View(mat)
mat <- matrix(rnorm(10000),100,100)
View(mat)
mat <- matrix(rnorm(1:10000),100,100)
source('~/ProgrammingAssignment2/cachematrix.R')
x=makeCacheMatrix()
x$set(mat)
x$get
x$get()
source('~/ProgrammingAssignment2/cachematrix.R')
x$get()
x=makeCacheMatrix()
x$get()
invmat <- cacheSolve(mat)
cacheSolve(mat)
invmat2 <- cacheSolve(mat)
invmat2 <- cacheSolve(invmat)
View(mat)
rm(invmat, invmat2, k, x)
source('~/ProgrammingAssignment2/cachematrix.R')
init(mat)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
x
lapply(x, mean)
sapply(x, mean)
s=sapply(x, mean)
s
class(s)
s$c
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
?runif
f <- gl(x,f)
f <- gl(3,10)
f
split(x, f)
?split
?gl
lapply(split(x, f), mean)
library(datasets)
head(airquality)
s <- split(airqulity, airquality$Month)
s <- split(airquality, airquality$Month)
str(s)
airquality
str(s)
lapply(s, function(x){})
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
split(airquality, airquality$day)
split(airquality, airquality$Day)
daysplit <- split(airquality, airquality$Day)
x <- rnorm(10)
f1 <- g1(2,5)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x, list(f1,f2)))
str(split(x, list(f1,f2), drop=TRUE))
interaction(airquality$month, airquality$day)
x <- c(rnorm(10), runif(10), rnorm(10,1))
runif(10)
f <- gl(2,10)
f <- gl(3,10)
f
tapply(x, f mean)
tapply(x, f, mean)
tapply(x, f, mean, simplify=FALSE)
split(x, f)
tapply(x, f, range)
sumsq <- function(mu, sigma, x){
sum(((x-mu)/sigma)^2)
}
x <- rnorm(100)
sumsq(1:10,10:20,x)
sumsq(1:10,1:10,x)
vectorize(sumaq(1:10,1:10,x))
Vectorize(sumaq(1:10,1:10,x))
Vectorize(sumsq(1:10,1:10,x))
apply(mat, 2, mean)
apply(mat, 1, mean)
apply(mat, 1, sum)
lappy(mat, sum)
lapply(mat, sum)
sapply(mat, sum)
rowSums(mat)
apply(mat, 1, quantile, probs = c(0.25, 0.75))
quant <- apply(mat, 1, quantile, probs = c(0.25, 0.75))
quant$25%
quant$'25%'
quant[,99]
quant[1,99]
?dims
??dims
daysplit
library(datasets)
data(iris)
?iris
iris
iris$Sepal.Length
iris$Sepal.Length[iris$Species == "virginica"]
mean(iris$Sepal.Length[iris$Species == "virginica"])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mpgbycyl <- tapply(mtcars$mpg, mtcars$cyl, mean)
mpgbycyl[2]
abs(mpgbycyl[2]-mpgbycyl[3])
debug(ls)
ls
ls()
ls(specdata)
ls()
debug(ls)
ls()
exit
abs(mpgbycyl[2]-mpgbycyl[3])
abs(mpgbycyl[1]-mpgbycyl[3])
sapply(split(mtcars$mpg, mtcars$cyl), mean)
outcomes <- read.csv("assignment3data\outcome-of-care-measures.csv" colClasses="character")
outcomes <- read.csv("assignment3data\outcome-of-care-measures.csv", colClasses="character")
outcomes <- read.csv("assignment3data/outcome-of-care-measures.csv", colClasses="character")
head(outcomes)
ncol(outcome)
ncol(outcomes)
names(outcomes)
outcomes.names <- names(outcomes)
head(outcomes[,11])
outcomes[,11] <- as.numeric(outcomes[,11])
head(outcomes[,11])
hist(outcome[,11])
hist(outcomes[,11])
View(outcomes)
View(outcomes)
View(outcomes)
View(outcomes)
?tapply
?max
tapply(outcomes[,11], outcomes[,7], max)
tapply(outcomes[,11], outcomes[,7], max, na.rm =TRUE)
tapply(outcomes[,11], outcomes[,7], min, na.rm =TRUE)
?which.max
AL  <- outcomes[outcomes[,7] == "AL"]
AL  <- outcomes[1:46][outcomes[,7] == "AL"]
AL  <- outcomes[ which(outcomes[,7] == "AL")]
AL  <- outcomes[ which(outcomes$State == "AL")]
AL  <- outcomes[ which(outcomes$"State" == "AL")]
AL  <- outcomes#[ which(outcomes$"State" == "AL")]
AL  <- outcomes#[ which(outcomes[:,7] == "AL")]
AL  <- outcomes#[ which(outcomes[,7] == "AL")]
AL  <- outcomes[ which(outcomes[:,7] == "AL")]
AL  <- outcomes[ which(outcomes[,7] == "AL")]
AL  <- outcomes[ which(outcomes[,7] == "")]
AL  <- outcomes[ which(outcomes[7] == "MI")]
AL  <- outcomes[ which(outcomes[,7] == ""),]
AL  <- outcomes[ which(outcomes[,7] == "AL"),]
which.min(AL)
AL
which.min(AL[,11])
AL[78,11]
AL[78,2]
source('~/CourseraR/best.R')
best(MI, heart attack)
best("MI", "heart attack")
source('~/CourseraR/best.R')
source('~/CourseraR/best.R')
best("MI", "heart attack")
state.data <- best("MI", "heart attack")
source('~/CourseraR/best.R')
state.data <- best("AL", "heart attack")
source('~/CourseraR/best.R')
state.data <- best("AL", "heart attack")
state.data <- best("MI", "heart attack")
state.data <- best("bb", "heart attack")
?stop
stop(invalid)
stop("invalid outcome")
source('~/CourseraR/best.R')
state.data <- best("MI", "heart attack")
state.data <- best("MI", "pneumonia")
state.data <- best("MI", "stroke")
"MI" %in% outcomes[,7]
"BB" %in% outcomes[,7]
"BB" !%in% outcomes[,7]
!"BB" %in% outcomes[,7]
source('~/CourseraR/best.R')
state.data <- best("MI", "stroke")
state.data <- best("MI", "pneumonia")
state.data <- best("bb", "heart attack")
source('~/CourseraR/best.R')
state.data <- best("MI", "pneumonia")
View(state.data)
state.data[which.min(statedata[,2])]
state.data[which.min(state.data[,2])]
View(state.data)
state.data[which.min(state.data[,2]).]
state.data[which.min(state.data[,2]),]
lowestmortality <- state.data[which.min(state.data[,2]),]
lowestmortality <- state.data[which.min(as.numeric(state.data[,2]),]
lowestmortality <- state.data[which.min(state.data[,2]),]
View(lowestmortality)
lowestmortality <- state.data[which.min(state.data[,2]),1]
source('~/CourseraR/best.R')
best("bb", "heart attack")
best("MI", "heart attack")
View(state.data)
source('~/CourseraR/best.R')
best("MI", "heart attack")
source('~/CourseraR/best.R')
best("MI", "heart attack")
source('~/CourseraR/best.R')
best("MI", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
source('~/CourseraR/rankhospital.R')
rankhospital("MI", "heart attack", 1)
source('~/CourseraR/rankhospital.R')
rankhospital("MI", "heart attack", 1)
source('~/CourseraR/rankhospital.R')
rankhospital("MI", "heart attack", 1)
state.data <- rankhospital("MI", "heart attack", 1)
View(state.data)
?order
complete.cases(state.data)
state.data[,2] <- as.numeric(state.data[,2])
state.data[,2] <- as.numeric(state.data[,2])
complete.cases(state.data)
state.data <- state.data[complete.cases(state.data),]
order(state.data)
order(state.data)
View(state.data)
View(state.data, state.data)
View(state.data, state.data[,2])
order(state.data[,2])
order(state.data[,2], state.data[,1])
cbind(state.data, order(state.data[,2], state.data[,1]))
state.data <- cbind(state.data, order(state.data[,2], state.data[,1]))
View(state.data)
state.data <- cbind(state.data, rank=order(state.data[,2], state.data[,1]))
View(state.data)
source('~/CourseraR/rankhospital.R')
rankhospital("MI", "heart attack", 1)
state.data <- rankhospital("MI", "heart attack", 1)
View(state.data)
source('~/CourseraR/rankhospital.R')
state.data <- rankhospital("MI", "heart attack", 1)
View(state.data)
source('~/CourseraR/rankhospital.R')
state.data <- rankhospital("MI", "heart attack", 1)
View(state.data)
rankhospital("MI", "heart attack", 1)
source('~/CourseraR/rankhospital.R')
rankhospital("MI", "heart attack", 1)
rankhospital("MI", "heart attack", "best")
rankhospital("MI", "heart attack", "worst")
View(state.data)
source('~/CourseraR/rankhospital.R')
source('~/CourseraR/rankhospital.R')
rankhospital("MI", "heart attack", "worst")
source('~/CourseraR/rankhospital.R')
rankhospital("MI", "heart attack", "worst")
rankhospital("MI", "heart attack", "best")
rankhospital("MI", "heart attack", "10")
rankhospital("MI", "heart attack", 1:10)
source('~/CourseraR/rankhospital.R')
submit()
rankhospital("TX", "heart failure", 4)
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/CourseraR/rankhospital.R')
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 1)
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", 1)
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", 1)
View(state.data)
submit
submit()
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", 1)
rankhospital("TX", "heart failure", "worst")
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", "worst")
submit()
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", "worst")
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", "worst")
View(state1)
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart failure", "worst")
View(state1)
best("TX", "heart failure")
rankhospital("TX", "heart failure", 4)
source('~/CourseraR/rankhospital.R')
submit()
submit()
submit()
submit()
rankhospital("TX", "heart failure", 4000)
source('~/CourseraR/rankhospital.R')
unique(outcomes[,7])
as.data.frame(x)
as.data.frame(toast)
source('~/CourseraR/rankall.R')
source('~/CourseraR/rankall.R')
rankall("heart attack")
source('~/CourseraR/rankall.R')
rankall("heart attack")
source('~/CourseraR/rankall.R')
rankall("heart attack")
source('~/CourseraR/rankall.R')
rankall("heart attack")
source('~/CourseraR/rankall.R')
rankall("heart attack")
source('~/CourseraR/rankall.R')
rankall("heart attack")
source('~/CourseraR/rankall.R')
rankall("heart attack")
source('~/CourseraR/rankall.R')
rankall("heart attack")
ranks <- rankall("heart attack")
source('~/CourseraR/rankall.R')
ranks <- rankall("heart attack")
warnings()
source('~/CourseraR/rankall.R')
ranks <- rankall("heart attack")
View(ranks)
submit()
submit()
submit()
source('~/CourseraR/rankall.R')
ranks <- rankall("heart attack")
source('~/CourseraR/rankall.R')
ranks <- rankall("heart attack", "worst")
source('~/CourseraR/rankall.R')
ranks <- rankall("heart attack", "worst")
ranks <- rankall("heart attack", "worst")
source('~/CourseraR/rankall.R')
ranks <- rankall("heart attack", "worst")
View(ranks)
submit()
source('~/CourseraR/rankhospital.R')
rankhospital("TX", "heart attack", best)
rankhospital("TX", "heart attack", "best"
)
rankhospital("TX", "heart attack", "worst"
)
source('~/ExData_Plotting1/plot1.R')
plot1()
setwd("~/ExData_Plotting1")
plot1()
data <- plot1()
source('~/ExData_Plotting1/plot1.R')
plot1()
?as.numeric
source('~/ExData_Plotting1/plot1.R')
plot1()
colors()
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot1.R')
plot1()
?dev.off
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot2.r')
plot2()
View(data)
plot(data)
plot(data$Global_active_power)
plot(as.numeric(data$Global_active_power))
plot(as.numeric(data$Global_active_power), pch=0)
plot(as.numeric(data$Global_active_power), pch=FALSE)
plot(as.numeric(data$Global_active_power), pch=NA)
line(as.numeric(data$Global_active_power))
?datetime
datetimes <- strptime(c(data$Date, data$Time))
datetimes <- strptime(c(data$Date, data$Time), "%Y-%m-%d %H:%M:%S")
datetimes
c(data$Date, data$Time)
data$Time
paste(data$Date, data$Time, sep = " ")
datetimes = paste(data$Date, data$Time, sep = " ")
datetimes <- strptime(paste(data$Date, data$Time, sep = " "), "%Y-%m-%d %H:%M:%S")
head(datetimes)
plot(data$Global_active_power, datetimes)
plot(datetimes, data$Global_active_power)
plot(datetimes, data$Global_active_power, type=n)
plot(datetimes, data$Global_active_power, type="n")
line(datetimes, data$Global_active_power, type="l")
line(datetimes, data$Global_active_power)
line(datetimes, data$Global_active_power, type="p")
plot(datetimes, data$Global_active_power, type="l")
source('~/ExData_Plotting1/plot2.r')
plot2()
source('~/ExData_Plotting1/plot2.r')
plot2()
plot(datetimes, data$Sub_metering_1, type="l", ylab = "Energy sub metering",
xlab="", col="black")
par(new=T)
plot(datetimes, data$Sub_metering_2, type="l", ylab = "Energy sub metering",
xlab="", col="red")
par(new=F)
plot(datetimes, data$Sub_metering_3, type="l", ylab = "Energy sub metering",
xlab="", col="blue")
plot(datetimes, data$Sub_metering_1, type="l", ylab = "Energy sub metering",
xlab="", col="black")
par(new=T)
plot(datetimes, data$Sub_metering_2, type="l", ylab = "Energy sub metering",
xlab="", col="red")
par(new=T)
plot(datetimes, data$Sub_metering_3, type="l", ylab = "Energy sub metering",
xlab="", col="blue")
source('~/ExData_Plotting1/plot3.r')
plot3()
source('~/ExData_Plotting1/plot3.r')
plot3()
source('~/ExData_Plotting1/plot3.r')
plot3()
source('~/ExData_Plotting1/plot4.r')
plot4()
source('~/ExData_Plotting1/plot3.r')
source('~/ExData_Plotting1/plot3.r')
plot3()
?legend
source('~/ExData_Plotting1/plot3.r')
plot3()
source('~/ExData_Plotting1/plot3.r')
plot3()
source('~/ExData_Plotting1/plot3.r')
plot3()
source('~/ExData_Plotting1/plot4.r')
plot4()
source('~/ExData_Plotting1/plot1.R')
plot1()
source('~/ExData_Plotting1/plot4.r')
plot4()
source('~/ExData_Plotting1/plot3.r')
plot3()
source('~/ExData_Plotting1/plot4.r')
plot4()
